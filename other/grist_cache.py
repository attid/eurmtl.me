import asyncio
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from loguru import logger

@dataclass
class GristCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Grist –≤ –ø–∞–º—è—Ç–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–µ—à–∏ —Ç–∞–±–ª–∏—Ü
    caches: Dict[str, List[Dict[str, Any]]] = field(default_factory=dict)
    index_caches: Dict[str, Dict[str, Dict[str, Any]]] = field(default_factory=dict)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cached_tables = {
        'GRIST_access': {'indexed_by': 'key'},  # –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞
        'EURMTL_secretaries': {'indexed_by': None},  # —Å–µ–∫—Ä–µ—Ç–∞—Ä–∏
        'EURMTL_assets': {'indexed_by': 'code'},  # –∞–∫—Ç–∏–≤—ã
        'EURMTL_users': {'indexed_by': 'account_id'},  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å)
        'EURMTL_accounts': {'indexed_by': 'id'},  # –∞–∫–∫–∞—É–Ω—Ç—ã
        'EURMTL_pools': {'indexed_by': 'need_dropdown'},  # –ø—É–ª—ã (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ need_dropdown)
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
    additional_indexes = {
        'EURMTL_users': ['telegram_id'],  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è telegram_id
    }
    
    async def initialize_cache(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ Grist...")
        
        for table_name in self.cached_tables:
            try:
                await self.load_table_to_cache(table_name)
                count = len(self.caches.get(table_name, []))
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –∫–µ—à ({count} –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        
        logger.info("üéâ –ö–µ—à Grist —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def load_table_to_cache(self, table_name: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–µ—à"""
        from other.grist_tools import grist_manager, MTLGrist
        
        table_config = getattr(MTLGrist, table_name)
        data = await grist_manager.load_table_data(table_config)
        
        if data:
            self.caches[table_name] = data
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            config = self.cached_tables[table_name]
            if config.get('indexed_by'):
                index_field = config['indexed_by']
                self.index_caches[table_name] = {
                    record[index_field]: record 
                    for record in data 
                    if index_field in record and record[index_field] is not None
                }
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            if table_name in self.additional_indexes:
                for field in self.additional_indexes[table_name]:
                    index_key = f"{table_name}_{field}"
                    self.index_caches[index_key] = {
                        record[field]: record 
                        for record in data 
                        if field in record and record[field] is not None
                    }
    
    async def update_cache_by_webhook(self, table_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ –≤–µ–±—Ö—É–∫—É - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}")
        
        if table_name not in self.cached_tables:
            logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            await self.load_table_to_cache(table_name)
            count = len(self.caches.get(table_name, []))
            logger.info(f"‚úÖ –ö–µ—à —Ç–∞–±–ª–∏—Ü—ã {table_name} –æ–±–Ω–æ–≤–ª–µ–Ω ({count} –∑–∞–ø–∏—Å–µ–π)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
    
    def get_table_data(self, table_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–µ—à–∞"""
        return self.caches.get(table_name, [])
    
    def find_by_index(self, table_name: str, key: str, field: str = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if field:
            # –ò—â–µ–º –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            index_key = f"{table_name}_{field}"
            index_cache = self.index_caches.get(index_key, {})
        else:
            # –ò—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            index_cache = self.index_caches.get(table_name, {})
        
        return index_cache.get(key)
    
    def find_by_filter(self, table_name: str, field: str, values: List[Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        table_data = self.caches.get(table_name, [])
        return [record for record in table_data if record.get(field) in values]
    
    def find_one_by_filter(self, table_name: str, field: str, value: Any) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        table_data = self.caches.get(table_name, [])
        for record in table_data:
            if record.get(field) == value:
                return record
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
grist_cache = GristCacheManager()