// ==UserScript==
// @name        Good_links_at_Stellar_Expert
// @namespace   http://tampermonkey.net/
// @match       https://stellar.expert/*
// @grant       none
// @version     1.11
// @description Change links at Stellar Expert
// @author      skynet
// @updateURL   https://eurmtl.me/static/Good_links_at_Stellar_Expert.user.js
// @downloadURL https://eurmtl.me/static/Good_links_at_Stellar_Expert.user.js
// @icon        https://eurmtl.me/static/favicon.ico
// ==/UserScript==

let observer;

async function CalcOrders(accountAddress) {
    const url = `https://horizon.stellar.org/accounts/${accountAddress}/offers?limit=100`;

    try {
        const response = await fetch(url);
        const data = await response.json();

        if (!data._embedded || !data._embedded.records) {
            console.error('No offers found.');
            return;
        }

        const totals = {};

        data._embedded.records.forEach(offer => {
            const { selling, amount } = offer;
            let assetKey;

            if (selling.asset_type === 'native') {
                assetKey = 'XLM';
            } else {
                assetKey = `${selling.asset_code}-${selling.asset_issuer}`;
            }

            if (totals[assetKey]) {
                totals[assetKey] += parseFloat(amount);
            } else {
                totals[assetKey] = parseFloat(amount);
            }
        });

        console.log(totals);
        document.querySelectorAll('.account-balance').forEach(balanceElement => {
            const assetLabelElement = balanceElement.querySelector('[aria-label]');
            if (assetLabelElement) {
                const assetLabel = assetLabelElement.getAttribute('aria-label');
                if (totals[assetLabel]) {
                    const condensedText = balanceElement.querySelector('.condensed').textContent.replace(',', '').trim();
                    const currentAmount = parseFloat(condensedText);
                    const freeAmount = currentAmount - totals[assetLabel];
                    const summaryText = `Orders (${totals[assetLabel].toFixed(2)}) Free (${freeAmount.toFixed(2)})`;
                    const tinyCondensedDiv = balanceElement.querySelector('.text-tiny.condensed');
                    tinyCondensedDiv.innerHTML = `<div style="color: black;">${summaryText}</div>`;
                }
            }
        });

    } catch (error) {
        console.error('Error fetching or processing data:', error);
    }
}

function initButton() {
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    const accountAddressElement = document.querySelector('.account-address .account-key');

    if (accountAddressElement) {
        const accountAddress = accountAddressElement.innerText.trim();
        addExternalLinks(accountAddress);
    } else {
        console.error('–ê–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}

function addExternalLinks(accountAddress) {
    const buttonStellarchain = document.createElement('a');
    const buttonScopuly = document.createElement('a');
    const buttonCalcOrders = document.createElement('a');
    const buttonWhereSigner = document.createElement('a');
    const buttonBSN = document.createElement('a');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Stellarchain
    buttonStellarchain.href = `https://stellarchain.io/accounts/${accountAddress}`;
    buttonStellarchain.innerText = 'Stellarchain';
    buttonStellarchain.target = "_blank";
    buttonStellarchain.classList.add('button', 'small', 'text-small', 'skynet-button');
    //buttonStellarchain.style.marginRight = '10px';

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Scopuly
    buttonScopuly.href = `https://scopuly.com/account/${accountAddress}`;
    buttonScopuly.innerText = 'Scopuly';
    buttonScopuly.target = "_blank";
    buttonScopuly.classList.add('button', 'small', 'text-small', 'skynet-button');

    const buttonBsnExpert = document.createElement('a');
    buttonBsnExpert.href = `https://bsn.expert/accounts/${accountAddress}`;
    buttonBsnExpert.innerText = 'bsn.expert';
    buttonBsnExpert.target = "_blank";
    buttonBsnExpert.classList.add('button', 'small', 'text-small', 'skynet-button');
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ Calc Orders
    buttonCalcOrders.href = '#';
    buttonCalcOrders.innerText = 'Reload Scripts';
    buttonCalcOrders.addEventListener('click', () => reloadScripts(accountAddress));
    buttonCalcOrders.classList.add('button', 'small', 'text-small', 'skynet-button');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ Calc Orders
    buttonWhereSigner.href = '#';
    buttonWhereSigner.innerText = 'üîë';
    buttonWhereSigner.addEventListener('click', () => loadWhereSigner(accountAddress));
    buttonWhereSigner.classList.add('button', 'small', 'text-small', 'skynet-button');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ Calc Orders
    buttonBSN.href = '#';
    buttonBSN.innerText = 'BSN';
    buttonBSN.addEventListener('click', () => loadBSN(accountAddress));
    buttonBSN.classList.add('button', 'small', 'text-small', 'skynet-button');

    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    const parentElement = document.querySelector('h1, h2'); // –ò–∑–º–µ–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (parentElement) {
        parentElement.appendChild(buttonBsnExpert);
        parentElement.appendChild(buttonScopuly);
        parentElement.appendChild(buttonStellarchain);

        const moreButton = document.createElement('button');
        moreButton.innerText = 'More';
        moreButton.classList.add('button', 'small', 'text-small', 'skynet-button');
        parentElement.appendChild(moreButton);

        const hiddenButtons = document.createElement('div');
        hiddenButtons.style.display = 'none';
        hiddenButtons.appendChild(buttonCalcOrders);
        hiddenButtons.appendChild(buttonWhereSigner);
        hiddenButtons.appendChild(buttonBSN);
        parentElement.appendChild(hiddenButtons);

        moreButton.addEventListener('click', () => {
            hiddenButtons.style.display = hiddenButtons.style.display === 'none' ? 'block' : 'none';
        });
    }

}


function removeUnwantedElements() {
    let unwantedElements = document.querySelectorAll('.account-balance.claimable:not(:last-child)');
    unwantedElements.forEach(element => element.remove());
}

function isValidBase64(str) {
    try {
        atob(str);
        return true;
    } catch (e) {
        return false;
    }
}

function isValidStellarAddress(address) {
    return /^[G][A-Z2-7]{55}$/.test(address);
}

function decodeBase64Text() {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—Å—Å—ã–ª–∫–∏
    function createLink(url) {
        const link = document.createElement('a');
        link.href = url;
        link.textContent = url;
        link.target = '_blank';
        link.rel = 'noopener noreferrer'; // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return link;
    }

    let encodedListItems = document.querySelectorAll('.text-small.condensed .word-break');

    if (encodedListItems) {
        encodedListItems.forEach(item => {
            let separatorIndex = item.textContent.lastIndexOf(': ');
            if (separatorIndex > -1) {
                let property = item.textContent.substring(0, separatorIndex);
                let encodedText = item.textContent.substring(separatorIndex + 2);

                if (!item.hasAttribute('data-old')) {
                    item.setAttribute('data-old', encodedText);

                    if (isValidBase64(encodedText) && !encodedText.startsWith('*')) {
                        let decodedText = atob(encodedText);

                        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                        item.textContent = property + ': ';

                        if (isValidStellarAddress(decodedText)) {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Stellar-–∞–¥—Ä–µ—Å–∞
                            let link = document.createElement('a');
                            link.href = `https://stellar.expert/explorer/public/account/${decodedText}`;
                            link.textContent = decodedText;
                            link.target = '_blank';
                            item.appendChild(link);
                        } else if (isValidUrl(decodedText)) {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
                            item.appendChild(createLink(decodedText));
                        } else {
                            // –ü–æ–∏—Å–∫ URL –≤ —Ç–µ–∫—Å—Ç–µ
                            const urlRegex = /(https?:\/\/[^\s]+)/g;
                            let lastIndex = 0;
                            let match;

                            while ((match = urlRegex.exec(decodedText)) !== null) {
                                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ URL
                                if (match.index > lastIndex) {
                                    item.appendChild(document.createTextNode(
                                        decodedText.substring(lastIndex, match.index)
                                    ));
                                }

                                // –î–æ–±–∞–≤–ª—è–µ–º URL –∫–∞–∫ —Å—Å—ã–ª–∫—É
                                item.appendChild(createLink(match[0]));

                                lastIndex = match.index + match[0].length;
                            }

                            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                            if (lastIndex < decodedText.length) {
                                item.appendChild(document.createTextNode(
                                    decodedText.substring(lastIndex)
                                ));
                            }
                        }
                    }
                }
            }
        });
    }
}


function modifyLinks() {
    let links = document.querySelectorAll('.account-balance');
    links.forEach((link) => {
        let assetLink = link.querySelector('.asset-link');
        if (assetLink) {
            let asset = assetLink.getAttribute('aria-label');

            if (!assetLink.querySelector('.skynet-helper')) {
                let newHref;

                if (asset.includes('-')) {
                    newHref = `https://stellar.expert/explorer/public/asset/${asset}`;
                } else {
                    newHref = `https://stellar.expert/explorer/public/liquidity-pool/${asset}`;
                }

                let searchButton = document.createElement('span');
                searchButton.className = 'skynet-helper'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
                searchButton.setAttribute('onclick', `location.href='${newHref}';`);
                searchButton.setAttribute('style', 'background-color: black; color: white; border-radius: 50%; padding: 5px; margin-left: 10px; cursor: pointer;');
                searchButton.innerHTML = '<span style="font-size: 16px;">üîç</span>';

                assetLink.appendChild(searchButton);
            }
        }
    });
}


function initOfferButton() {
    const offerId = new URL(window.location.href).pathname.split('/').pop().split('?')[0];

    if (offerId) {
        const button = document.createElement('a');
        button.href = `https://horizon.stellar.org/offers/${offerId}`;
        button.target = '_blank';
        button.className = 'button small text-small skynet-button';
        button.textContent = 'Horizon';

        const h2Elements = document.querySelectorAll('h2');
        let found = false;
        for (let h2 of h2Elements) {
            const span = h2.querySelector('span.dimmed');
            if (span && span.textContent.includes('DEX offer')) {
                h2.appendChild(button);
                found = true;
                break;
            }
        }
        if (!found) {
            console.error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è DEX –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } else {
        console.error('ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}

function loadXDR(txID) {
    const url = 'https://horizon.stellar.org/transactions/' + txID;

    fetch(url)
        .then(response => response.json())
        .then(data => {
            // –ü–æ–ª—É—á–∞–µ–º envelope_xdr –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const envelopeXDR = data.envelope_xdr;

            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π div —Å XDR
            const xdrDiv = document.createElement('div');
            xdrDiv.className = 'xdr-container';
            xdrDiv.style.cssText = `
                padding: 10px;
                border-radius: 4px;
                margin-bottom: 10px;
                word-break: break-all;
                font-family: monospace;
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const heading = document.createElement('h4');
            heading.textContent = 'Transaction XDR:';
            heading.style.marginBottom = '5px';
            xdrDiv.appendChild(heading);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º XDR
            const xdrContent = document.createElement('div');
            xdrContent.textContent = envelopeXDR;
            xdrContent.style.cssText = `
                -webkit-user-select: all !important;
                -moz-user-select: all !important;
                -ms-user-select: all !important;
                user-select: all !important;
            `;
            xdrDiv.appendChild(xdrContent);

            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π div —Å –∫–ª–∞—Å—Å–æ–º segment
            const segmentDiv = document.querySelector('.segment');
            if (segmentDiv) {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π div –≤ –Ω–∞—á–∞–ª–æ segment
                segmentDiv.insertBefore(xdrDiv, segmentDiv.firstChild);
            } else {
                console.error('–≠–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º segment –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ XDR:', error);
        });
}




function initTxButton() {
    //const txId = new URL(window.location.href).pathname.split('/').pop().split('?')[0];
    const txId = document.querySelector('h2 .block-select').textContent.trim();
    console.log(txId);

    if (txId) {
        const button = document.createElement('a');
        button.href = '#';
        button.innerText = 'Get XDR';
        button.classList.add('button', 'small', 'text-small', 'skynet-button');
        button.addEventListener('click', () => loadXDR(txId));

        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        const parentElement = document.querySelector('h1, h2'); // –ò–∑–º–µ–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (parentElement) {
            parentElement.appendChild(button);
        }

    } else {
        console.error('ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}


function checkPage() {
    const accountPattern = /https:\/\/stellar.expert\/explorer\/public\/account\/[^/]+$/;
    const offerPattern = /https:\/\/stellar.expert\/explorer\/public\/offer\/[^/]+$/;
    const txPattern = /https:\/\/stellar.expert\/explorer\/public\/tx\/[^/]+$/;
    const assetPattern = /https:\/\/stellar.expert\/explorer\/public\/asset\/[A-Za-z0-9\-\.]*$/;
    const liquidityPoolPattern = /https:\/\/stellar.expert\/explorer\/public\/liquidity-pool\/[A-Za-z0-9]*$/;
    const contractPattern = /https:\/\/stellar.expert\/explorer\/public\/contract\/[^/]+$/;
    const currentUrl = window.location.href;

    if (accountPattern.test(currentUrl)) {
        if (!document.querySelector('.skynet-button')) {
            //console.log("URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç.");
            initButton()
            removeUnwantedElements();
        }
        modifyLinks();
        decodeBase64Text();

    } else if (assetPattern.test(currentUrl)) {
        if (!document.querySelector('.skynet-button')) {
            //console.log("URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç.");
            initAssetButton();
        }
    } else if (liquidityPoolPattern.test(currentUrl)) {
        if (!document.querySelector('.skynet-button')) {
            //console.log("URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç.");
            initLiquidityPoolButton();
        }
    } else if (contractPattern.test(currentUrl)) {
        modifyLinks();
    }
    if (offerPattern.test(currentUrl)) {
        if (!document.querySelector('.skynet-button')) {
            //console.log("URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç.");
            initOfferButton()
        }
    }
    if (txPattern.test(currentUrl)) {
        if (!document.querySelector('.skynet-button')) {
            //console.log("URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç.");
            initTxButton()
        }
    }
}

function initAssetButton() {
    const assetFull = new URL(window.location.href).pathname.split('/').pop();
    const assetParts = assetFull.split('-');
    const asset = assetParts[0];
    const issuer = assetParts.length > 1 ? assetParts[1] : null;

    if (assetFull) {
        const h2Elements = document.querySelectorAll('h2');
        let parentElement;
        for (let h2 of h2Elements) {
            const span = h2.querySelector('span.dimmed');
            if (span) {
                parentElement = h2;
                break;
            }
        }

        if (parentElement) {
            const buttonEurl = document.createElement('a');
            buttonEurl.href = `https://eurmtl.me/asset/${asset}`;
            buttonEurl.target = '_blank';
            buttonEurl.className = 'button small text-small skynet-button';
            buttonEurl.textContent = 'eurmtl.me';
            parentElement.appendChild(buttonEurl);

            const buttonStellarchain = document.createElement('a');
            buttonStellarchain.href = `https://stellarchain.io/assets/${assetFull}`;
            buttonStellarchain.target = '_blank';
            buttonStellarchain.className = 'button small text-small skynet-button';
            buttonStellarchain.textContent = 'Stellarchain';
            parentElement.appendChild(buttonStellarchain);

            if (issuer) {
                const buttonScopuly = document.createElement('a');
                buttonScopuly.href = `https://scopuly.com/trade/${asset}-XLM/${issuer}/native`;
                buttonScopuly.target = '_blank';
                buttonScopuly.className = 'button small text-small skynet-button';
                buttonScopuly.textContent = 'Scopuly';
                parentElement.appendChild(buttonScopuly);
            }

        } else {
            console.error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } else {
        console.error('ID –∞–∫—Ç–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}

async function initLiquidityPoolButton() {
    const poolId = new URL(window.location.href).pathname.split('/').pop();

    if (poolId) {
        const h2Elements = document.querySelectorAll('h2');
        let parentElement;
        for (let h2 of h2Elements) {
            const span = h2.querySelector('span.dimmed');
            if (span) {
                parentElement = h2;
                break;
            }
        }

        if (parentElement) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É StellarX
            const buttonStellarX = document.createElement('a');
            buttonStellarX.href = '#';
            buttonStellarX.target = '_blank';
            buttonStellarX.className = 'button small text-small skynet-button';
            buttonStellarX.textContent = 'StellarX';
            parentElement.appendChild(buttonStellarX);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–ª–µ
            try {
                const response = await fetch(`https://horizon.stellar.org/liquidity_pools/${poolId}`);
                const poolData = await response.json();
                
                if (poolData.reserves && poolData.reserves.length === 2) {
                    const [reserve1, reserve2] = poolData.reserves;
                    
                    let stellarXUrl;
                    if (reserve1.asset === 'native') {
                        stellarXUrl = `https://www.stellarx.com/amm/analytics/native/${reserve2.asset}`;
                    } else if (reserve2.asset === 'native') {
                        stellarXUrl = `https://www.stellarx.com/amm/analytics/native/${reserve1.asset}`;
                    } else {
                        stellarXUrl = `https://www.stellarx.com/amm/analytics/${reserve1.asset}/${reserve2.asset}`;
                    }
                    
                    buttonStellarX.href = stellarXUrl;
                }
            } catch (error) {
                console.error('Error fetching pool data:', error);
            }

            const buttonStellarchain = document.createElement('a');
            buttonStellarchain.href = `https://stellarchain.io/liquidity-pool/${poolId}`;
            buttonStellarchain.target = '_blank';
            buttonStellarchain.className = 'button small text-small skynet-button';
            buttonStellarchain.textContent = 'Stellarchain';
            parentElement.appendChild(buttonStellarchain);

            const buttonScopuly = document.createElement('a');
            buttonScopuly.href = `https://scopuly.com/pool/${poolId}`;
            buttonScopuly.target = '_blank';
            buttonScopuly.className = 'button small text-small skynet-button';
            buttonScopuly.textContent = 'Scopuly';
            parentElement.appendChild(buttonScopuly);

        } else {
            console.error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } else {
        console.error('ID –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}


function loadWhereSigner(accountAddress) {
    var myHtmlContent = '<h4 style="margin-bottom: 0px;">Where Account Signer</h4>';
    myHtmlContent += '<ul class="text-small condensed">';
    var url = 'https://horizon.stellar.org/accounts/?signer=' + accountAddress + '&limit=200';

    fetch(url)
        .then(response => response.json())
        .then(data => {
            data._embedded.records.forEach(record => {
                var accountId = record.id;
                myHtmlContent += '<li><a title="' + accountId + '" aria-label="' + accountId + '" class="account-address word-break" href="/explorer/public/account/' + accountId + '"><span class="account-key">' + accountId.slice(0, 4) + '‚Ä¶' + accountId.slice(-4) + '</span></a></li>';
            });
            myHtmlContent += '</ul>';

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            var containerId = 'where-signer-container';
            var container = document.getElementById(containerId);
            if (!container) {
                container = document.createElement('div');
                container.id = containerId;
                var allAccountBalancesDiv = document.querySelector('.all-account-balances');
                if (allAccountBalancesDiv) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º all-account-balances
                    allAccountBalancesDiv.parentNode.insertBefore(container, allAccountBalancesDiv);
                } else {
                    console.error('Element with class all-account-balances not found.');
                    return;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.innerHTML = myHtmlContent;
        })
        .catch(error => console.error('Error:', error));
}

function loadBSN(accountAddress) {
    var myHtmlContent = '<h4 style="margin-bottom: 0px;">BSN Income Tags</h4>';
    myHtmlContent += '<ul class="text-small condensed">';
    var url = 'https://bsn.expert/json';

    fetch(url)
        .then(response => response.json())
        .then(data => {
            var accounts = data.accounts;

            for (var accountId in accounts) {
                if (accounts.hasOwnProperty(accountId)) {
                    var account = accounts[accountId];
                    var tags = account.tags;

                    for (var tag in tags) {
                        if (tags.hasOwnProperty(tag) && tag !== 'Signer') {
                            if (tags[tag].includes(accountAddress)) {
                                myHtmlContent += '<li><b>' + tag + '</b> from ';
                                myHtmlContent += '<a title="' + accountId + '" aria-label="' + accountId + '" class="account-address word-break" href="/explorer/public/account/' + accountId + '"><span class="account-key">' + accountId.slice(0, 4) + '‚Ä¶' + accountId.slice(-4) + '</span></a></li>';
                            }
                        }
                    }
                }
            }

            myHtmlContent += '</ul>';

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BSN
            var containerId = 'bsn-income-tags-container';
            var container = document.getElementById(containerId);
            if (!container) {
                container = document.createElement('div');
                container.id = containerId;
                var allAccountBalancesDiv = document.querySelector('.all-account-balances');
                if (allAccountBalancesDiv) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º all-account-balances
                    allAccountBalancesDiv.parentNode.insertBefore(container, allAccountBalancesDiv);
                } else {
                    console.error('Element with class all-account-balances not found.');
                    return;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.innerHTML = myHtmlContent;
        })
        .catch(error => console.error('Error:', error));
}


async function reloadScripts(accountAddress) {
    CalcOrders(accountAddress)
    modifyLinks();
    removeUnwantedElements();
    decodeBase64Text();
}

setInterval(checkPage, 3000);
