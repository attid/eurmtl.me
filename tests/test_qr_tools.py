"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è qr_tools.py
"""
import os
import tempfile
import pytest
from PIL import Image
from unittest.mock import patch, MagicMock

from other.qr_tools import create_beautiful_code, decode_color


class TestQRTools:
    """–¢–µ—Å—Ç—ã –¥–ª—è QR –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""

    def test_decode_color_valid_hex(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ HEX —Ü–≤–µ—Ç–∞"""
        # –¢–µ—Å—Ç –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–∞
        assert decode_color('FFFFFF') == (255, 255, 255)
        
        # –¢–µ—Å—Ç —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        assert decode_color('000000') == (0, 0, 0)
        
        # –¢–µ—Å—Ç —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞
        assert decode_color('C1D9F9') == (193, 217, 249)
        
        # –¢–µ—Å—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        assert decode_color('FF0000') == (255, 0, 0)

    def test_decode_color_lowercase(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
        assert decode_color('c1d9f9') == (193, 217, 249)
        assert decode_color('ffffff') == (255, 255, 255)

    def test_decode_color_mixed_case(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ —Å–º–µ—à–∞–Ω–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
        assert decode_color('C1d9F9') == (193, 217, 249)
        assert decode_color('fF00aA') == (255, 0, 170)

    def test_create_beautiful_code_creates_file(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –≤ static/qr/
        temp_filename = '/static/qr/test_qr.png'

        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            result = create_beautiful_code(temp_filename, 'Test', 'https://example.com')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            assert os.path.exists(full_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(full_path) as img:
                assert img.format == 'PNG'
                assert img.size[0] > 0
                assert img.size[1] > 0
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            assert result is None or isinstance(result, Image.Image)
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            if os.path.exists(full_path):
                os.unlink(full_path)

    def test_create_beautiful_code_with_empty_text(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        temp_filename = '/static/qr/test_empty.png'

        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
            create_beautiful_code(temp_filename, '', 'https://example.com')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            assert os.path.exists(full_path)

        finally:
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            if os.path.exists(full_path):
                os.unlink(full_path)

    def test_create_beautiful_code_with_special_characters(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        temp_filename = '/static/qr/test_special.png'

        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
            special_text = "Test with √©mojis üöÄ and special chars: @#$%^&*()"
            special_url = "https://example.com/test?param=value&other=test"
            
            create_beautiful_code(temp_filename, special_text, special_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            assert os.path.exists(full_path)

        finally:
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            if os.path.exists(full_path):
                os.unlink(full_path)

    @pytest.mark.parametrize("invalid_color", [
        "GGGGGG",  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    ])
    def test_decode_color_invalid_input(self, invalid_color):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö HEX —Ü–≤–µ—Ç–æ–≤"""
        with pytest.raises((ValueError, IndexError)):
            decode_color(invalid_color)

    def test_decode_color_tolerant_behavior(self):
        """–¢–µ—Å—Ç —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è decode_color - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é –¥–ª–∏–Ω—É"""
        # –§—É–Ω–∫—Ü–∏—è decode_color –æ–∫–∞–∑–∞–ª–∞—Å—å –±–æ–ª–µ–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ–π, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–ª–∏–Ω–∞–º–∏ —Å—Ç—Ä–æ–∫
        assert decode_color('FFFFF') is not None  # 5 —Å–∏–º–≤–æ–ª–æ–≤
        assert decode_color('FFFFFFF') is not None  # 7 —Å–∏–º–≤–æ–ª–æ–≤
        assert decode_color('12345') is not None  # 5 —Å–∏–º–≤–æ–ª–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ 3 —á–∏—Å–µ–ª
        result = decode_color('FFFFFF')
        assert isinstance(result, tuple)
        assert len(result) == 3
        assert all(isinstance(x, int) for x in result)

    def test_create_beautiful_code_invalid_path(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –ø—É—Ç–µ–º"""
        invalid_path = "/nonexistent/directory/file.png"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with pytest.raises((OSError, FileNotFoundError, PermissionError)):
            create_beautiful_code(invalid_path, 'Test', 'https://example.com')

    @patch('other.qr_tools.ImageFont.truetype')
    def test_create_beautiful_code_font_fallback(self, mock_truetype):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞"""
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞
        mock_truetype.side_effect = OSError("Font not found")
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
            temp_path = tmp_file.name
        
        try:
            os.unlink(temp_path)
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —à—Ä–∏—Ñ—Ç–∞
            # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –µ—Å—Ç—å fallback –Ω–∞ default —à—Ä–∏—Ñ—Ç)
            with pytest.raises(OSError):
                create_beautiful_code(temp_path, 'Test', 'https://example.com')
                
        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)

    def test_main_function_behavior(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è main —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ü–∏–∫–ª–æ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è URL"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ if __name__ == '__main__'
        # –ú—ã –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç
        long_text = 'x' * 10000  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ QR-–∫–æ–¥–∞
        assert len(long_text) > 2953  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç QR-–∫–æ–¥–∞
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —É–º–µ–Ω—å—à–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        shortened_text = long_text[:-10]
        assert len(shortened_text) == len(long_text) - 10

    def test_qr_code_size_and_format(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞"""
        temp_filename = '/static/qr/test_size.png'

        try:
            create_beautiful_code(temp_filename, 'Test Size', 'https://example.com/test')

            from other.config_reader import start_path
            full_path = start_path + temp_filename

            with Image.open(full_path) as img:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—É–º–µ–Ω—å—à–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
                assert img.size[0] >= 150  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–±—ã–ª–æ 200)
                assert img.size[1] >= 150  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (–±—ã–ª–æ 200)
                assert img.size[0] <= 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                assert img.size[1] <= 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (–∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º—É)
                ratio = img.size[0] / img.size[1]
                assert 0.8 <= ratio <= 1.2  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –±–ª–∏–∑–∫–æ –∫ 1:1
                
        finally:
            from other.config_reader import start_path
            full_path = start_path + temp_filename
            if os.path.exists(full_path):
                os.unlink(full_path)
